HTML Structure (index.html):

The HTML file defines the structure of the webpage.
It includes a container for the Memory Card Game (mcg-container), a grid container (grid-container) for displaying cards, buttons for actions like restarting the game, and audio elements for playing sounds.

CSS Styling (style.css):
This file contains CSS styles for the appearance of elements on the webpage. However, since it's empty in the provided code, there are no specific styles defined.

JavaScript (index.js):
Global Variables: Declares variables to store the grid container, cards data, score, timer, seconds, and remaining pairs.

Fetching Cards Data: Retrieves card data from a JSON-like array instead of an external JSON file.

Start Timer Function: Initializes the timer by setting an interval to call the updateTimer function every second.

Update Timer Function: Decrements the seconds variable and updates the displayed timer accordingly. Changes the timer text color to red when the remaining time is 15 seconds or less. Stops the timer and displays an alert when the timer reaches 0.

Shuffle Cards Function: Randomly shuffles the order of cards using the Fisher-Yates shuffle algorithm.

Generate Cards Function: Creates HTML elements for each card using the card data fetched earlier. Adds event listeners to each card element to handle card flipping.

Flip Card Function: Flips a card when clicked. Checks if the board is locked or if the clicked card is the same as the first card. If not, adds the "flipped" class to the card element and checks for a match.

Check For Match Function: Compares the names of the first and second flipped cards. If they match, increments the score, updates the score display, disables the matched cards, plays a success sound, and checks if all pairs are matched to end the game. If not, flips the unmatched cards back, plays a fail sound, and resets the board.

Disable Cards Function: Removes click event listeners from matched cards to prevent further flipping.

Unflip Cards Function: Flips unmatched cards back by removing the "flipped" class after a short delay.

Reset Board Function: Resets the first and second card variables and unlocks the board after a match attempt.

Restart Function: Clears the timer interval, resets the board and score, shuffles cards, updates the score and timer display, clears the grid container, generates new cards, and starts the timer again.

Play Success/Fail Sound Functions: Plays success or fail sounds when a match attempt is successful or unsuccessful.

Update Score Color Function: Changes the color of the score display based on the current score level.

Mouseover/Mouseout Event Listeners: Changes the text of the "MCG" element on mouseover/mouseout to provide a visual indication of interactivity.

This code creates a memory card game where players match pairs of cards while racing against a timer. Let me know if you need further clarification on any part of the code!



detail explain of every line

cards = [...cardData, ...cardData];:
This line duplicates the cardData array, effectively doubling the number of cards.
The resulting cards array contains two copies of each card from the cardData array.

remainingPairs = cards.length / 2;:
This line calculates the initial number of pairs in the game by dividing the total number of cards (which has been doubled) by 2.
Each pair consists of two identical cards with the same image and name.

shuffleCards();:
This function call shuffles the cards array, randomizing the order of the cards.
It ensures that the cards are in a different order each time the game starts, enhancing replayability.

generateCards();:
This function call dynamically generates HTML elements for each card based on the shuffled cards array.
It creates a card element for each object in the cards array, setting its attributes and inner HTML to display the card's image and name.
Event listeners are added to each card to handle the click event, allowing players to flip the cards.

startTimer();:
This function call initiates the countdown timer, which updates every second.
It triggers the updateTimer() function repeatedly using setInterval(), ensuring that the timer updates in real-time while the game is in progress.
After executing these lines, the game is fully initialized and ready for players to interact with. 
The cards are shuffled and displayed on the grid, the timer starts counting down, and players can start flipping cards to find matching pairs. 
The remainingPairs variable keeps track of the number of pairs remaining to be matched, and the game progresses until all pairs are found or the timer runs out.


shuffle card()

Looping through the cards array:
The function starts by initializing a loop that iterates backward through the cards array, starting from the last element (cards.length - 1) and ending at the second element (i > 0).

Selecting a random index:
Inside the loop, for each iteration, it generates a random index (j) between 0 and i (inclusive) using Math.random() and Math.floor().
This random index (j) represents a position within the cards array that will be swapped with the current card at index i.

Swapping cards:
It then swaps the card at index i with the card at index j using destructuring assignment.
This effectively shuffles the position of the cards in the array. The random index j ensures that each card has an equal chance of being placed at any position in the array.

Repeating the process:
The loop continues until it reaches the second element of the array (i > 0), ensuring that every card in the array has been considered for shuffling.

Final shuffled array:
Once the loop completes, the cards array has been shuffled, with the order of the cards randomized.
Overall, this function ensures that the cards in the game are shuffled in a random order each time it's called, enhancing the unpredictability and challenge of the game.




The generateCards() function is responsible for dynamically creating HTML elements for each card based on the data in the cards array and adding them to the game grid. Let's break down how it works:

Looping through the cards array:
The function iterates over each element in the cards array using a for...of loop, where card represents each individual card object in the array.
Creating card elements:
For each card, the function creates a new <div> element using document.createElement("div"). This element will represent the card in the game.
The class "card" is added to the card element using classList.add("card"), ensuring consistent styling for all cards.
The data-name attribute is set on the card element with the value of the card's name. This attribute can be used later to identify the card when matching pairs.
The inner HTML of the card element is set using a template literal to include two nested <div> elements representing the front and back faces of the card.
The front face contains an <img> element with the class "front-image" and the image source set to the path specified in the card.image property.
The back face is initially left empty, indicating that it will be hidden until the card is flipped.
Appending card elements:
After creating and configuring the card element, it is appended to the gridContainer, which represents the game grid where the cards will be displayed.
Adding event listeners:
An event listener is added to each card element to handle the click event. When a card is clicked, it triggers the flipCard() function with the corresponding card element passed as an argument.
The use of an arrow function ensures that the flipCard() function is called with the correct context, allowing it to access the clicked card element.
Overall, the generateCards() function dynamically creates HTML elements for each card, configures their attributes and inner HTML based on the data in the cards array, and adds event listeners to handle user interactions with the cards. This process effectively sets up the visual representation of the game board with all the cards displayed and ready for gameplay.





let firstCard; let secondCard; let lockBoard = false;:
These variables are declared outside of the flipCard function, allowing them to maintain their state across multiple calls to flipCard.
firstCard and secondCard are used to keep track of the cards that have been flipped.
lockBoard is a flag used to prevent further card flips while the game is checking for a match or in a disabled state.

function flipCard(card) { ... }:
This function is called when a card is clicked.
It takes a card parameter representing the card that was clicked.

if (lockBoard || firstCard === card) return;:
This condition checks if the board is locked (i.e., if lockBoard is true) or if the clicked card is the same as firstCard.
If either condition is true, it exits the function early, preventing further execution.

card.classList.add("flipped");:
This line adds the "flipped" class to the clicked card's HTML element, triggering a CSS animation or transition to visually flip the card.

if (!firstCard) { ... }:
This block is executed if firstCard is not yet assigned (i.e., it's null).
It checks if firstCard is falsy (which means it's not assigned yet).
If so, it assigns the clicked card to firstCard and exits the function, allowing the player to flip another card.

secondCard = card; lockBoard = true; checkForMatch();:
If firstCard is already assigned (indicating that this is the second card flipped), the clicked card is assigned to secondCard.
lockBoard is set to true to prevent further card flips while the game checks for a match.
Finally, it calls the checkForMatch() function to determine if the two flipped cards match.

Overall, this function manages the flipping of cards in the game. It ensures that only two cards can be flipped at a time, prevents flipping the same card twice, and triggers the matching logic once two cards have been flipped.




The checkForMatch() function is responsible for determining whether the two flipped cards match or not. Let's break down its functionality:

Extracting card names:
The function retrieves the names of the two flipped cards by accessing their data-name attributes.
It uses getAttribute("data-name") to get the value of the data-name attribute for both firstCard and secondCard.

Comparing card names:
It compares the names of the two flipped cards (firstCardName and secondCardName) to check if they match.
If the names match, it indicates that the player has found a matching pair.

Handling matching cards:
If the names of the two flipped cards match, the player has found a matching pair.
The function increments the score variable to keep track of the number of pairs matched.
It updates the score display on the game interface by setting the text content of the element with the class "score" to the updated score.
The function then updates the color of the score display based on the current score using the updateScoreColor() function.
It disables the matched cards from being flipped again by calling the disableCards() function.
The playSuccessSound() function is called to play a sound effect indicating a successful match.
The remainingPairs variable is decremented to keep track of the remaining pairs of cards to be matched.

Checking for game completion:
If the score reaches 6 (indicating that all pairs have been matched), the function stops the timer by clearing the interval using clearInterval(timer).
It displays an alert notifying the player that they have won the game and prompts them to click "OK" to restart the game.
The restart() function is called after a brief delay to reset the game and allow the player to play again.

Handling mismatched cards:
If the names of the two flipped cards do not match, it indicates that the player has not found a matching pair.
The function calls the unflipCards() function to flip the cards back over after a brief delay, giving the player a chance to see the cards before they are hidden again.
The playFailSound() function is called to play a sound effect indicating a failed match.
Overall, the checkForMatch() function is essential for managing the matching logic in the game and providing feedback to the player based on their card selections.